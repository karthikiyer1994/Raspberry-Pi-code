/* A simple server in the internet domain using TCP
 The port number is passed as an argument */
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
// for lcd code
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <wiringPi.h>
#include "lcd.c"
#define COLS 15
#define ROWS 3
 int sockfd, newsockfd, portno, clilen;
 char buffer[256];
 struct sockaddr_in serv_addr, cli_addr;
 int n,i=0;
char compared_received_string(char (*arr)[COLS]);
char result, command_array[ROWS][COLS]={"START",
 "STOP",
27
 "EXIT",};
char command_bit=0,start_bit=0,exit_bit=0;
void error(char *msg)
{
 perror(msg);
 exit(1);
}
char compared_received_string(char (*arr)[COLS])
{
 unsigned char i, j=0,string_counter=0;
 for (i = 0; i < ROWS; i++)
 {
 string_counter=0;
 for (j = 0; j < sizeof ((*arr)[j]) ; j++)
 {
 while((buffer[j] != '\0'))
 {
 if(buffer[j]!=(*arr)[j])
 break;
 j++;
 string_counter++;
 }
 // if((receive_buffer[j]==(*arr)[j])||(string_counter >= string_no))
 // if(((*arr)[j]) == '\0' && buffer[j] < 30)
 if(((*arr)[j]) == '\0' )
 return i;
 else
28
 break;
 }
 arr++;
 } return 100;
}
int main(int argc, char *argv[])
{
 lcd_init();
 wiringPiSetup () ;
 load_display_buffer(version_menu);
 write_message(message);
 delay_second(500);
 if (argc < 2) {
 fprintf(stderr,"ERROR, no port provided\n");
 exit(1);
 }
 sockfd = socket(AF_INET, SOCK_STREAM, 0);
 if (sockfd < 0)
 error("ERROR opening socket");
 bzero((char *) &serv_addr, sizeof(serv_addr));
 portno = atoi(argv[1]);
 serv_addr.sin_family = AF_INET;
 serv_addr.sin_addr.s_addr = INADDR_ANY;
 serv_addr.sin_port = htons(portno);
 if (bind(sockfd, (struct sockaddr *) &serv_addr,
 sizeof(serv_addr)) < 0)
 error("ERROR on binding");
29
while(1)
{
 listen(sockfd,5);
 clilen = sizeof(cli_addr);
 newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
 if (newsockfd < 0)
 error("ERROR on accept");
 bzero(buffer,256);
 n = read(newsockfd,buffer,255);
 if (n < 0) error("ERROR reading from socket");
 printf("Here is the message: %s\n",buffer);
 result = compared_received_string(command_array);
 printf("string match=%d\n",result);
 command_bit = 0;
 if (result !=100)
 { switch(result)
 { case 0:
 { load_display_buffer(blank_screen);
write_message(message);
 command_bit = 1;
 start_bit =1; }
 break;
 case 1:
 {
 load_display_buffer(version_menu);
 write_message(message);
 start_bit =0;
30
 }
 break;
 case 2:
 { load_display_buffer(thanks_screen);
 write_message(message);
 exit_bit = 1;
 start_bit =0; }
 break;}}
 if((command_bit != 1) && (start_bit ==1))
 { lcdPosition ( 0, 0, 0) ;
 lcdPuts (0, " ") ;
lcdPosition ( 0, 0, 1) ;
 lcdPuts (0, " ") ;
 lcdPosition ( 0, 0, 0) ;
 for (i=0 ; buffer[i] != 0x0a; i++)
 lcdPutchar (0, buffer[i]) ;
for(i=0;i< sizeof buffer;i++)
 buffer[i] = ' '; }
 if(exit_bit)
 break;
 n = write(newsockfd,"I got your message",18);
 if (n < 0) error("ERROR writing to socket");}
close(newsockfd);
close(sockfd);
 return 0;
}
